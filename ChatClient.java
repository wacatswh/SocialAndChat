/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chatclient;

import java.io.*;
import java.awt.event.*;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author wacats
 */
public class ChatClient extends javax.swing.JFrame {

    String[] userList = new String[100];     // list of current users
    String[] singleUserData = new String[3]; // storing pob, dob, music profile only
    
    public ChatClient() {
        initComponents();
        
        try {
            SocketManager.INSTACNE.open();
        }
        catch (IOException ex) {
            ex.printStackTrace();
        }
        
        socketReader = new SocketReader();
        socketReader.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String text = e.getActionCommand();
                textArea.append("\n");
                textArea.append(text);
                textArea.setCaretPosition(textArea.getDocument().getLength());
                txtInput.setText("");
        }
    });
        socketReader.execute();
        
        socketWriter = new SocketWriter();
        socketWriter.execute();
        
        lstFriend.addMouseListener(mouseListener);
        
        // thread for NameHandler
        new Thread(new NameHandler()).start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        btnConnect = new javax.swing.JButton();
        btnDisconnect = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();
        lblShowStatus = new javax.swing.JLabel();
        txtInput = new javax.swing.JTextField();
        lblFriend = new javax.swing.JLabel();
        lblInfo = new javax.swing.JLabel();
        lblSharedSong = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtInfo = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtSharedSong = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        lstFriend = new javax.swing.JList<>();
        btnPlay = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Social Client");

        textArea.setEditable(false);
        textArea.setColumns(20);
        textArea.setRows(5);
        textArea.setText("Welcome to the Chat Server. Type '/close' or Click 'Disconnect' to close.");
        textArea.setWrapStyleWord(true);
        textArea.setCaretPosition(textArea.getDocument().getLength());
        scrollPane.setViewportView(textArea);

        btnConnect.setText("Connect");
        btnConnect.setActionCommand("btnConnect");
        btnConnect.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnConnectMouseClicked(evt);
            }
        });

        btnDisconnect.setText("Disconnect");
        btnDisconnect.setActionCommand("btnDisconnect");
        btnDisconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDisconnectActionPerformed(evt);
            }
        });

        lblStatus.setText("Status: ");

        lblShowStatus.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblShowStatus.setForeground(new java.awt.Color(255, 51, 51));
        lblShowStatus.setText("Disconnected");

        txtInput.setToolTipText("");
        txtInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtInputActionPerformed(evt);
            }
        });

        lblFriend.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblFriend.setText("Friends");

        lblInfo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblInfo.setText("Information");

        lblSharedSong.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblSharedSong.setText("Song Genres");

        txtInfo.setColumns(20);
        txtInfo.setRows(5);
        jScrollPane1.setViewportView(txtInfo);

        txtSharedSong.setColumns(20);
        txtSharedSong.setRows(5);
        jScrollPane2.setViewportView(txtSharedSong);

        lstFriend.setModel(new javax.swing.AbstractListModel<String>() {
            public int getSize() { return userList.length; }
            public String getElementAt(int i) { return userList[i]; }
        });
        jScrollPane3.setViewportView(lstFriend);

        btnPlay.setText("PLAY");
        btnPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlayActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(scrollPane)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblFriend)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(63, 63, 63)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblInfo)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 72, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblSharedSong)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnConnect)
                        .addGap(31, 31, 31)
                        .addComponent(btnDisconnect)
                        .addGap(26, 26, 26)
                        .addComponent(lblStatus)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblShowStatus)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(txtInput, javax.swing.GroupLayout.Alignment.LEADING))
                .addGap(30, 30, 30))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnPlay, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(96, 96, 96))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFriend)
                    .addComponent(lblInfo)
                    .addComponent(lblSharedSong))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnPlay, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(txtInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnConnect)
                    .addComponent(btnDisconnect)
                    .addComponent(lblStatus)
                    .addComponent(lblShowStatus))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnConnectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnConnectMouseClicked
        // TODO add your handling code here:
        lblShowStatus.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblShowStatus.setForeground(new java.awt.Color(0, 204, 51));
        lblShowStatus.setText("Connected");
        
        // ADD CODES FOR CONNECTING TO CHAT SERVER
        
    }//GEN-LAST:event_btnConnectMouseClicked

    private void btnDisconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDisconnectActionPerformed
        // TODO add your handling code here:
        lblShowStatus.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblShowStatus.setForeground(new java.awt.Color(255, 51, 51));
        lblShowStatus.setText("Disconnected");
        
        // ADD CODES FOR DISCONNECTING FROM CHAT SERVER
        
    }//GEN-LAST:event_btnDisconnectActionPerformed

    private void txtInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtInputActionPerformed
        // TODO add your handling code here:
        if(SocketManager.INSTACNE.isOpen()) {
            socketWriter.write(txtInput.getText());
        }
        
        else {
            System.out.println("!! Not open");
        }
    }//GEN-LAST:event_txtInputActionPerformed

    private void btnPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlayActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnPlayActionPerformed

    MouseListener mouseListener = new MouseAdapter() {
        public void mouseClicked(MouseEvent e) {
            if(e.getClickCount() == 1) {
                String selectedItem = (String)lstFriend.getSelectedValue();
                String[] request = new String[6]; // 5 for data, 1 for action
                request[0] = selectedItem;
                request[5] = "det";
                
                try {
                    // outStream = new ObjectOutputStream(SockDef.socialSock.getOutputStream());
                    // SockDef.socialSock.in = new ObjectOutputStream(SockDef.socialSock.getOutputStream());
                    SockDef.out.writeObject(request);
                    
                    // note: dob, pob, music profile only
                    // inStream = new ObjectInputStream(SockDef.socialSock.getInputStream());
                    // singleUserData = (String[]) inStream.readObject();
                    // singleUserData = (String[]) SockDef.in.readObject();
                }
                catch(IOException ex) {
                    Logger.getLogger(ChatClient.class.getName()).log(Level.SEVERE, null, ex);
                }
                // catch (ClassNotFoundException ex) {
                //     Logger.getLogger(ChatClient.class.getName()).log(Level.SEVERE, null, ex);
                // }
                
                // call at here? invokeLater to update textfield with friend info
//                txtInfo.setText(singleUserData[0]);
//                txtInfo.append("\n");
//                txtInfo.append(singleUserData[1]);
//                txtSharedSong.setText(singleUserData[2]);
            }
        }
    };
    
    class NameHandler implements Runnable {
        public void run() {
            try {
                while(true) {
                    // ObjectInputStream in = new ObjectInputStream(SockDef.socialSock.getInputStream());
                    // DataInputStream inData = new DataInputStream(SockDef.socialSock.getInputStream());
                    
                    do {
                        // note: userList is String[100]
//                        userList = (String[])SockDef.in.readObject();
//                        System.out.println("Friend array received!");
                        
                        
//                        java.awt.EventQueue.invokeLater(new Runnable() {
//                            public void run() {
//                                lstFriend.setModel(new javax.swing.AbstractListModel<String>() {
//                                    public int getSize() { return userList.length; }
//                                    public String getElementAt(int i) { return userList[i]; }
//                                });   
//                            }
//                        });    

                            String msg;
                            msg = SockDef.in.readUTF();
                            
                            if(msg.equals("namelist")) 
                            {
                                userList = (String[])SockDef.in.readObject();
                                System.out.println("Namelist array received");
                                
                                java.awt.EventQueue.invokeLater(new Runnable() {
                                    public void run() {
                                        lstFriend.setModel(new javax.swing.AbstractListModel<String>() {
                                        public int getSize() { return userList.length; }
                                        public String getElementAt(int i) { return userList[i]; }
                                        });   
                                    }
                                });
                            }
                            
                            else if(msg.equals("detail"))
                            {
                                singleUserData = (String[]) SockDef.in.readObject();
                                
                                java.awt.EventQueue.invokeLater(new Runnable() {
                                    public void run() {
                                        txtInfo.setText(singleUserData[0]);
                                        txtInfo.append("\n");
                                        txtInfo.append(singleUserData[1]);
                                        txtSharedSong.setText(singleUserData[2]);   
                                    }
                                });
                                
                                
                            }
                    } while(SockDef.socialSock.isConnected());
                    
                    // socket.close(); 
                }
            }
            
            catch(Exception ex) {
                ex.printStackTrace();
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
    
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChatClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChatClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChatClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChatClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        
        // SocketManager.INSTACNE.open();
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChatClient().setVisible(true);   
            }
        });        
        //</editor-fold>       
    }

    private SocketWriter socketWriter;
    public SocketReader socketReader;
    
    // ObjectInput and ObjectOutput
    private Socket socialSocket = null;
    private ObjectInputStream inStream = null;
    private ObjectOutputStream outStream = null;
    int[] anArray = new int[10];
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConnect;
    private javax.swing.JButton btnDisconnect;
    private javax.swing.JButton btnPlay;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblFriend;
    private javax.swing.JLabel lblInfo;
    private javax.swing.JLabel lblSharedSong;
    private javax.swing.JLabel lblShowStatus;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JList<String> lstFriend;
    private javax.swing.JScrollPane scrollPane;
    private static javax.swing.JTextArea textArea;
    private javax.swing.JTextArea txtInfo;
    private javax.swing.JTextField txtInput;
    private javax.swing.JTextArea txtSharedSong;
    // End of variables declaration//GEN-END:variables
}

